{"version":3,"sources":["index.js"],"names":["refs","daysEl","document","querySelector","hoursEl","minsEl","secsEl","CountdownTimer","targetDate","onTick","intervalId","start","setInterval","currentDate","Date","now","deltaDate","time","getTimeComponents","days","Math","floor","hours","pad","mins","secs","value","String","padStart","updateClockface","textContent","timer","selector"],"mappings":";;;AA2GA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA3GA,QAAA,oBAEA,IAAMA,EAAO,CACTC,OAAQC,SAASC,cAAc,2BAC/BC,QAASF,SAASC,cAAc,4BAChCE,OAAQH,SAASC,cAAc,2BAC/BG,OAAQJ,SAASC,cAAc,4BAG7BI,EAAAA,WACkC,SAAA,EAAA,GAAtBC,IAAAA,EAAAA,EAAAA,WAAYC,EAAAA,EAAAA,OAAU,EAAA,KAAA,GAC3BC,KAAAA,WAAa,KACbF,KAAAA,WAAaA,EACbC,KAAAA,OAASA,EACTE,KAAAA,QA6Fb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QA1FY,MAAA,WAAA,IAAA,EAAA,KACHD,KAAAA,WAAaE,YAAY,WACpBC,IAAAA,EAAcC,KAAKC,MACnBC,EAAY,EAAKR,WAAaK,EAC9BI,EAAO,EAAKC,kBAAkBF,GAEpC,EAAKP,OAAOQ,IACb,OAmFP,CAAA,IAAA,oBAhFsBA,MAAAA,SAAAA,GAMP,MAAA,CAAEE,KALIC,KAAKC,MAAMJ,EAAQ,OAKjBK,MAJD,KAAKC,IAAIH,KAAKC,MAAOJ,EAAQ,MAAyB,OAI9CO,KAHT,KAAKD,IAAIH,KAAKC,MAAOJ,EAAQ,KAAoB,MAGlCQ,KAFf,KAAKF,IAAIH,KAAKC,MAAOJ,EAAQ,IAAc,SA4EhE,CAAA,IAAA,MAvEQS,MAAAA,SAAAA,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,SAsEzC,EAlGMrB,GAgCN,SAASsB,EAA6C,GAA3BV,IAAAA,EAAAA,EAAAA,KAAMG,EAAAA,EAAAA,MAAOE,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC1CzB,EAAKC,OAAO6B,YAAiBX,GAAAA,OAAAA,GAC7BnB,EAAKI,QAAQ0B,YAAiBR,GAAAA,OAAAA,GAC9BtB,EAAKK,OAAOyB,YAAiBN,GAAAA,OAAAA,GAC7BxB,EAAKM,OAAOwB,YAAiBL,GAAAA,OAAAA,GAGjC,IAAMM,EAAQ,IAAIxB,EAAe,CAC7ByB,SAAU,WACVxB,WAAY,IAAIM,KAAK,gBACrBL,OAAQoB","file":"src.e31708ce.js","sourceRoot":"..\\src","sourcesContent":["import \"./css/styles.css\";\r\n\r\nconst refs = {\r\n    daysEl: document.querySelector('span[data-value=\"days\"]'),\r\n    hoursEl: document.querySelector('span[data-value=\"hours\"]'),\r\n    minsEl: document.querySelector('span[data-value=\"mins\"]'),\r\n    secsEl: document.querySelector('span[data-value=\"secs\"]')\r\n}\r\n\r\nclass CountdownTimer {\r\n    constructor({ targetDate, onTick }) {\r\n        this.intervalId = null;\r\n        this.targetDate = targetDate;\r\n        this.onTick = onTick;\r\n        this.start();\r\n    };\r\n\r\n    start() {\r\n    this.intervalId = setInterval(() => {\r\n        const currentDate = Date.now();\r\n        const deltaDate = this.targetDate - currentDate;\r\n        const time = this.getTimeComponents(deltaDate);\r\n\r\n        this.onTick(time);\r\n    }, 1000);    \r\n    }    \r\n    \r\n    getTimeComponents(time) {\r\n        const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n        return { days, hours, mins, secs };\r\n    }\r\n\r\n    pad(value) {  \r\n        return String(value).padStart(2, '0');\r\n    };\r\n}\r\n\r\nfunction updateClockface({ days, hours, mins, secs }) {\r\n    refs.daysEl.textContent = `${days}`;\r\n    refs.hoursEl.textContent = `${hours}`;\r\n    refs.minsEl.textContent = `${mins}`;\r\n    refs.secsEl.textContent = `${secs}`;\r\n}\r\n\r\nconst timer = new CountdownTimer({\r\n    selector: '#timer-1',\r\n    targetDate: new Date('Jul 17, 2021'),\r\n    onTick: updateClockface,\r\n});\r\n\r\n// \r\n// \r\n// \r\n// \r\n// \r\n// \r\n// \r\n// ТАЙМЕР БЕЗ КЛАСА / ТАЙМЕР БЕЗ КЛАСА / ТАЙМЕР БЕЗ КЛАСА / ТАЙМЕР БЕЗ КЛАСА / ТАЙМЕР БЕЗ КЛАСА / ТАЙМЕР БЕЗ КЛАСА / ТАЙМЕР БЕЗ КЛАСА /\r\n// const refs = {\r\n//     daysEl: document.querySelector('span[data-value=\"days\"]'),\r\n//     hoursEl: document.querySelector('span[data-value=\"hours\"]'),\r\n//     minsEl: document.querySelector('span[data-value=\"mins\"]'),\r\n//     secsEl: document.querySelector('span[data-value=\"secs\"]')\r\n\r\n// }\r\n\r\n// const timer = {\r\n//     runTimer() {\r\n//         const futureDate = new Date(2020, 11, 31, 23, 59, 59);\r\n//         setInterval(() => {\r\n//             const currentDate = Date.now()\r\n//             const deltaDate = futureDate - currentDate;\r\n//             const time = getTimeComponents(deltaDate);\r\n//             // console.log('time', `${ days } ${ hours }:${ mins }:${ secs }`);\r\n//             updateClockface(time);\r\n\r\n            \r\n//         }, 1000)    \r\n//     }\r\n    \r\n// }\r\n// function getTimeComponents(time) {\r\n//     const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n//     const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n//     const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n//     const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n    \r\n//     return { days, hours, mins, secs };\r\n// }\r\n\r\n// function pad(value) {        \r\n//     return String(value).padStart(2, '0');\r\n// };\r\n\r\n// function updateClockface({ days, hours, mins, secs }) {\r\n//     refs.daysEl.textContent = `${days}`;\r\n//     refs.hoursEl.textContent = `${hours}`;\r\n//     refs.minsEl.textContent = `${mins}`;\r\n//     refs.secsEl.textContent = `${secs}`;\r\n\r\n    \r\n// }\r\n\r\n// timer.runTimer();\r\n"]}